import renpyclass Persistent_manager():  def __init__(self):     print "Persistent manager: saving has been disabled"      file = open(renpy.loader.transfn("../persistent.txt"), "r")    items_line = file.readline()    entries_line = file.readline()    file.close()        self.items = []    self.entries = []        items = items_line.split("=")[1].replace("\n", "").split(",")    for item in items:      item = item.strip()      if len(item) > 0:        self.items.append(item)        entries = entries_line.split("=")[1].replace("\n", "").split(",")    for entry in entries:      entry = entry.strip()      if len(entry) > 1:        self.entries.append(entry)      def has_item(self, id):    if id in self.items:      return True    return False      def has_journal_entry(self, journal_id, entry_id):    id = journal_id + ":" + entry_id    if id in self.entries:      return True    return False      def add_item(self, id):    if id in self.items:      return        # Worth checking if the item (id) actually exists?     self.items.append(id)        # Doesn't really make sense to write the file again every time an item (or    # a journal entry) is unlocked, but this'll have to do until I find the part     # in Renpy that does the actual saving.    self.save()      def add_journal_entry(self, journal_id, entry_id):    id = journal_id + ":" + entry_id    if id in self.entries:      return          self.entries.append(id)        self.save()      def save(self):    return    file = open(renpy.loader.transfn("../persistent.txt"), "w")    file.write("items=" + ",".join(self.items))    file.write("\nentries=" + ",".join(self.entries))    file.close()    